(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{197:function(t,n,e){"use strict";e.r(n);var o=e(0),i=Object(o.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"javascript高级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript高级","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript高级")]),t._v(" "),e("pre",[e("code",[t._v("1. JavaScript：\n\t1. ECMAScript：\n\t2. BOM：\n\t3. DOM：\n\t\t1. 事件\n")])]),t._v(" "),e("h2",{attrs:{id:"dom简单学习：为了满足案例要求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom简单学习：为了满足案例要求","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM简单学习：为了满足案例要求")]),t._v(" "),e("pre",[e("code",[t._v('* 功能：控制html文档的内容\n* 获取页面标签(元素)对象：Element\n\t* document.getElementById("id值"):通过元素的id获取元素对象\n\n* 操作Element对象：\n\t1. 修改属性值：\n\t\t1. 明确获取的对象是哪一个？\n\t\t2. 查看API文档，找其中有哪些属性可以设置\n\t2. 修改标签体内容：\n\t\t* 属性：innerHTML\n\t\t1. 获取元素对象\n\t\t2. 使用innerHTML属性修改标签体内容\n')])]),t._v(" "),e("h2",{attrs:{id:"事件简单学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件简单学习","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件简单学习")]),t._v(" "),e("pre",[e("code",[t._v('* 功能： 某些组件被执行了某些操作后，触发某些代码的执行。\n\t* 造句：  xxx被xxx,我就xxx\n\t\t* 我方水晶被摧毁后，我就责备对友。\n\t\t* 敌方水晶被摧毁后，我就夸奖自己。\n\n* 如何绑定事件\n\t1. 直接在html标签上，指定事件的属性(操作)，属性值就是js代码\n\t\t1. 事件：onclick--- 单击事件\n\n\t2. 通过js获取元素对象，指定事件属性，设置一个函数\n\n\t* 代码：\n\t\t<body>\n\t\t\t<img id="light" src="img/off.gif"  onclick="fun();">\n\t\t\t<img id="light2" src="img/off.gif">\n\t\t\t\n\t\t\t<script>\n\t\t\t    function fun(){\n\t\t\t        alert(\'我被点了\');\n\t\t\t        alert(\'我又被点了\');\n\t\t\t    }\n\t\t\t\n\t\t\t    function fun2(){\n\t\t\t        alert(\'咋老点我？\');\n\t\t\t    }\n\t\t\t\n\t\t\t    //1.获取light2对象\n\t\t\t    var light2 = document.getElementById("light2");\n\t\t\t    //2.绑定事件\n\t\t\t    light2.onclick = fun2;\n\n\n\t\t\t<\/script>\n\t\t</body>\n\n* 案例1：电灯开关\n\t<!DOCTYPE html>\n\t<html lang="en">\n\t<head>\n\t    <meta charset="UTF-8">\n\t    <title>电灯开关</title>\n\t\n\t</head>\n\t<body>\n\t\n\t<img id="light" src="img/off.gif">\n\t\n\t<script>\n\t    /*\n\t        分析：\n\t            1.获取图片对象\n\t            2.绑定单击事件\n\t            3.每次点击切换图片\n\t                * 规则：\n\t                    * 如果灯是开的 on,切换图片为 off\n\t                    * 如果灯是关的 off,切换图片为 on\n\t                * 使用标记flag来完成\n\t\n\t     */\n\t\n\t    //1.获取图片对象\n\t    var light = document.getElementById("light");\n\t\n\t    var flag = false;//代表灯是灭的。 off图片\n\t\n\t    //2.绑定单击事件\n\t    light.onclick = function(){\n\t        if(flag){//判断如果灯是开的，则灭掉\n\t            light.src = "img/off.gif";\n\t            flag = false;\n\t\n\t        }else{\n\t            //如果灯是灭的，则打开\n\t\n\t            light.src = "img/on.gif";\n\t            flag = true;\n\t        }\n\n\n\t    }\n\n\t<\/script>\n\t</body>\n\t</html>\n')])]),t._v(" "),e("h1",{attrs:{id:"bom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bom","aria-hidden":"true"}},[t._v("#")]),t._v(" BOM:")]),t._v(" "),e("pre",[e("code",[t._v("1. 概念：Browser Object Model 浏览器对象模型\n\t* 将浏览器的各个组成部分封装成对象。\n\n2. 组成：\n\t* Window：窗口对象\n\t* Navigator：浏览器对象\n\t* Screen：显示器屏幕对象\n\t* History：历史记录对象\n\t* Location：地址栏对象\n\n3. Window：窗口对象\n    1. 创建\n    2. 方法\n         1. 与弹出框有关的方法：\n            alert()\t显示带有一段消息和一个确认按钮的警告框。\n            confirm()\t显示带有一段消息以及确认按钮和取消按钮的对话框。\n                * 如果用户点击确定按钮，则方法返回true\n                * 如果用户点击取消按钮，则方法返回false\n            prompt()\t显示可提示用户输入的对话框。\n                * 返回值：获取用户输入的值\n         2. 与打开关闭有关的方法：\n            close()\t关闭浏览器窗口。\n                * 谁调用我 ，我关谁\n            open()\t打开一个新的浏览器窗口\n                * 返回新的Window对象\n         3. 与定时器有关的方式\n            setTimeout()\t在指定的毫秒数后调用函数或计算表达式。\n                * 参数：\n                    1. js代码或者方法对象\n                    2. 毫秒值\n                * 返回值：唯一标识，用于取消定时器\n            clearTimeout()\t取消由 setTimeout() 方法设置的 timeout。\n\n            setInterval()\t按照指定的周期（以毫秒计）来调用函数或计算表达式。\n            clearInterval()\t取消由 setInterval() 设置的 timeout。\n\n    3. 属性：\n        1. 获取其他BOM对象：\n            history\n            location\n            Navigator\n            Screen:\n        2. 获取DOM对象\n            document\n    4. 特点\n        * Window对象不需要创建可以直接使用 window使用。 window.方法名();\n        * window引用可以省略。  方法名();\n\n\n4. Location：地址栏对象\n\t1. 创建(获取)：\n\t\t1. window.location\n\t\t2. location\n\n\t2. 方法：\n\t\t* reload()\t重新加载当前文档。刷新\n\t3. 属性\n\t\t* href\t设置或返回完整的 URL。\n\n\n5. History：历史记录对象\n    1. 创建(获取)：\n        1. window.history\n        2. history\n\n    2. 方法：\n        * back()\t加载 history 列表中的前一个 URL。\n        * forward()\t加载 history 列表中的下一个 URL。\n        * go(参数)\t加载 history 列表中的某个具体页面。\n            * 参数：\n                * 正数：前进几个历史记录\n                * 负数：后退几个历史记录\n    3. 属性：\n        * length\t返回当前窗口历史列表中的 URL 数量。\n")])]),t._v(" "),e("h2",{attrs:{id:"dom："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom：","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM：")]),t._v(" "),e("pre",[e("code",[t._v('* 概念： Document Object Model 文档对象模型\n\t* 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作\n\n* W3C DOM 标准被分为 3 个不同的部分：\n\n\t* 核心 DOM - 针对任何结构化文档的标准模型\n\t\t* Document：文档对象\n\t\t* Element：元素对象\n\t\t* Attribute：属性对象\n\t\t* Text：文本对象\n\t\t* Comment:注释对象\n\n\t\t* Node：节点对象，其他5个的父对象\n\t* XML DOM - 针对 XML 文档的标准模型\n\t* HTML DOM - 针对 HTML 文档的标准模型\n\n\n\n\n\n* 核心DOM模型：\n\t* Document：文档对象\n\t\t1. 创建(获取)：在html dom模型中可以使用window对象来获取\n\t\t\t1. window.document\n\t\t\t2. document\n\t\t2. 方法：\n\t\t\t1. 获取Element对象：\n\t\t\t\t1. getElementById()\t： 根据id属性值获取元素对象。id属性值一般唯一\n\t\t\t\t2. getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组\n\t\t\t\t3. getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组\n\t\t\t\t4. getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组\n\t\t\t2. 创建其他DOM对象：\n\t\t\t\tcreateAttribute(name)\n            \tcreateComment()\n            \tcreateElement()\n            \tcreateTextNode()\n\t\t3. 属性\n\t* Element：元素对象\n\t\t1. 获取/创建：通过document来获取和创建\n\t\t2. 方法：\n\t\t\t1. removeAttribute()：删除属性\n\t\t\t2. setAttribute()：设置属性\n\t* Node：节点对象，其他5个的父对象\n\t\t* 特点：所有dom对象都可以被认为是一个节点\n\t\t* 方法：\n\t\t\t* CRUD dom树：\n\t\t\t\t* appendChild()：向节点的子节点列表的结尾添加新的子节点。\n\t\t\t\t* removeChild()\t：删除（并返回）当前节点的指定子节点。\n\t\t\t\t* replaceChild()：用新节点替换一个子节点。\n\t\t* 属性：\n\t\t\t* parentNode 返回节点的父节点。\n\n\n* HTML DOM\n\t1. 标签体的设置和获取：innerHTML\n\t2. 使用html元素对象的属性\n\t3. 控制元素样式\n\t\t1. 使用元素的style属性来设置\n\t\t\t如：\n\t\t\t\t //修改样式方式1\n\t\t        div1.style.border = "1px solid red";\n\t\t        div1.style.width = "200px";\n\t\t        //font-size--\x3e fontSize\n\t\t        div1.style.fontSize = "20px";\n\t\t2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。\n')])]),t._v(" "),e("h2",{attrs:{id:"事件监听机制："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件监听机制：","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件监听机制：")]),t._v(" "),e("pre",[e("code",[t._v("* 概念：某些组件被执行了某些操作后，触发某些代码的执行。\t\n\t* 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了\n\t* 事件源：组件。如： 按钮 文本输入框...\n\t* 监听器：代码。\n\t* 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。\n\n\n* 常见的事件：\n\t1. 点击事件：\n\t\t1. onclick：单击事件\n\t\t2. ondblclick：双击事件\n\t2. 焦点事件\n\t\t1. onblur：失去焦点\n\t\t2. onfocus:元素获得焦点。\n\n\t3. 加载事件：\n\t\t1. onload：一张页面或一幅图像完成加载。\n\n\t4. 鼠标事件：\n\t\t1. onmousedown\t鼠标按钮被按下。\n\t\t2. onmouseup\t鼠标按键被松开。\n\t\t3. onmousemove\t鼠标被移动。\n\t\t4. onmouseover\t鼠标移到某元素之上。\n\t\t5. onmouseout\t鼠标从某元素移开。\n\n\n\t5. 键盘事件：\n\t\t1. onkeydown\t某个键盘按键被按下。\t\n\t\t2. onkeyup\t\t某个键盘按键被松开。\n\t\t3. onkeypress\t某个键盘按键被按下并松开。\n\n\t6. 选择和改变\n\t\t1. onchange\t域的内容被改变。\n\t\t2. onselect\t文本被选中。\n\n\t7. 表单事件：\n\t\t1. onsubmit\t确认按钮被点击。\n\t\t2. onreset\t重置按钮被点击。")])])])},[],!1,null,null,null);n.default=i.exports}}]);