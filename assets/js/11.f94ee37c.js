(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{188:function(t,n,a){"use strict";a.r(n);var e=a(0),r=Object(e.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript基础","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript基础")]),t._v(" "),a("pre",[a("code",[t._v("1. JavaScript基础\n")])]),t._v(" "),a("h2",{attrs:{id:"javascript："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript：","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript：")]),t._v(" "),a("pre",[a("code",[t._v('* 概念：\t一门客户端脚本语言\n\t* 运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎\n\t* 脚本语言：不需要编译，直接就可以被浏览器解析执行了\n\n* 功能：\n\t* 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。\n\n* JavaScript发展史：\n\t1. 1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C--\t，后来更名为：ScriptEase\n\t2. 1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript\n\t3. 1996年，微软抄袭JavaScript开发出JScript语言\n\t4. 1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。\n\n\t* JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)\n\n* ECMAScript：客户端脚本语言的标准\n\t1. 基本语法：\n\t\t1. 与html结合方式\n\t\t\t1. 内部JS：\n\t\t\t\t* 定义<script>，标签体内容就是js代码\n\t\t\t2. 外部JS：\n\t\t\t\t* 定义<script>，通过src属性引入外部的js文件\n\n\t\t\t* 注意：\n\t\t\t\t1. <script>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。\n\t\t\t\t2. <script>可以定义多个。\n\t\t2. 注释\n\t\t\t1. 单行注释：//注释内容\n\t\t\t2. 多行注释：/*注释内容*/\n\t\t3. 数据类型：\n\t\t\t1. 原始数据类型(基本数据类型)：\n\t\t\t\t1. number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)\n\t\t\t\t2. string：字符串。 字符串  "abc" "a" \'abc\'\n\t\t\t\t3. boolean: true和false\n\t\t\t\t4. null：一个对象为空的占位符\n\t\t\t\t5. undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined\n\t\t\t\t\n\t\t\t2. 引用数据类型：对象\n\t\t\t\n\t\t4. 变量\n\t\t\t* 变量：一小块存储数据的内存空间\n\t\t\t* Java语言是强类型语言，而JavaScript是弱类型语言。\n\t\t\t\t* 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据\n\t\t\t\t* 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。\n\t\t\t* 语法：\n\t\t\t\t* var 变量名 = 初始化值;\n\t\t\t\n\t\t\t* typeof运算符：获取变量的类型。\n\t\t\t\t* 注：null运算后得到的是object\n\t\t5. 运算符\n\t\t\t1. 一元运算符：只有一个运算数的运算符\n\t\t\t\t++，-- ， +(正号)  \n\t\t\t\t* ++ --: 自增(自减)\n\t\t\t\t\t* ++(--) 在前，先自增(自减)，再运算\n\t\t\t\t\t* ++(--) 在后，先运算，再自增(自减)\n\t\t\t\t* +(-)：正负号\n\t\t\t    * 注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换\n                    * 其他类型转number：\n                        * string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）\n                        * boolean转number：true转为1，false转为0\n\t\t\t2. 算数运算符\n\t\t\t\t+ - * / % ...\n\n\t\t\t3. 赋值运算符\n\t\t\t\t= += -+....\n\n\t\t\t4. 比较运算符\n\t\t\t\t> < >= <= == ===(全等于)\n\t\t\t\t* 比较方式\n                  1. 类型相同：直接比较\n                      * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。\n                  2. 类型不同：先进行类型转换，再比较\n                      * ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false\n\n\n\t\t\t5. 逻辑运算符\n\t\t\t\t&& || !\n\t\t\t\t* 其他类型转boolean：\n                   1. number：0或NaN为假，其他为真\n                   2. string：除了空字符串("")，其他都是true\n                   3. null&undefined:都是false\n                   4. 对象：所有对象都为true\n\t\t\t\n\t\t\t6. 三元运算符\n\t\t\t\t? : 表达式\n\t\t\t\tvar a = 3;\n\t\t        var b = 4;\n\t\t\n\t\t        var c = a > b ? 1:0;\n\t\t\t\t* 语法：\n\t\t\t\t\t* 表达式? 值1:值2;\n\t\t\t\t\t* 判断表达式的值，如果是true则取值1，如果是false则取值2；\n\t\t\t\n\t\t6. 流程控制语句：\n\t\t\t1. if...else...\n\t\t\t2. switch:\n\t\t\t\t* 在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)\n\t\t\t\t\t* switch(变量):\n\t\t\t\t\t\tcase 值:\n\t\t\t\t* 在JS中,switch语句可以接受任意的原始数据类型\n\t\t\t3. while\n\t\t\t4. do...while\n\t\t\t5. for\n\t\t7. JS特殊语法：\n\t\t\t1. 语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)\n\t\t\t2. 变量的定义使用var关键字，也可以不使用\n        \t\t* 用： 定义的变量是局部变量\n                * 不用：定义的变量是全局变量(不建议)\n\n\t\t8. 练习：99乘法表\n\t\t<!DOCTYPE html>\n\t\t<html lang="en">\n\t\t<head>\n\t\t    <meta charset="UTF-8">\n\t\t    <title>99乘法表</title>\n\t\t    <style>\n\t\t        td{\n\t\t            border: 1px solid;\n\t\t        }\n\t\t\n\t\t    </style>\n\t\t\n\t\t    <script>\n\t\t\n\t\t        document.write("<table  align=\'center\'>");\n\n\n\t\t        //1.完成基本的for循环嵌套，展示乘法表\n\t\t        for (var i = 1; i <= 9 ; i++) {\n\t\t            document.write("<tr>");\n\t\t            for (var j = 1; j <=i ; j++) {\n\t\t                document.write("<td>");\n\t\t\n\t\t                //输出  1 * 1 = 1\n\t\t                document.write(i + " * " + j + " = " + ( i*j) +"&nbsp;&nbsp;&nbsp;");\n\t\t\n\t\t                document.write("</td>");\n\t\t            }\n\t\t            /*//输出换行\n\t\t            document.write("<br>");*/\n\t\t\n\t\t            document.write("</tr>");\n\t\t        }\n\t\t\n\t\t        //2.完成表格嵌套\n\t\t        document.write("</table>");\n\t\t\n\t\t    <\/script>\n\t\t</head>\n\t\t<body>\n\t\t\n\t\t</body>\n\t\t</html>\n\n\t2. 基本对象：\n\t\t1. Function：函数(方法)对象\n            1. 创建：\n                1. var fun = new Function(形式参数列表,方法体);  //忘掉吧\n                2. \n                    function 方法名称(形式参数列表){\n                        方法体\n                    }\n\n                3. \n                   var 方法名 = function(形式参数列表){\n                        方法体\n                   }\n            2. 方法：\n\n            3. 属性：\n                length:代表形参的个数\n            4. 特点：\n                1. 方法定义是，形参的类型不用写,返回值类型也不写。\n                2. 方法是一个对象，如果定义名称相同的方法，会覆盖\n                3. 在JS中，方法的调用只与方法的名称有关，和参数列表无关\n                4. 在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数\n            5. 调用：\n                方法名称(实际参数列表);\n\t\t\n\t\t2. Array:数组对象\n            1. 创建：\n                1. var arr = new Array(元素列表);\n                2. var arr = new Array(默认长度);\n                3. var arr = [元素列表];\n            2. 方法\n                join(参数):将数组中的元素按照指定的分隔符拼接为字符串\n                push()\t向数组的末尾添加一个或更多元素，并返回新的长度。\n            3. 属性\n                length:数组的长度\n            4. 特点：\n                1. JS中，数组元素的类型可变的。\n                2. JS中，数组长度可变的。\n\t\t3. Boolean\n\t\t4. Date：日期对象\n            1. 创建：\n                var date = new Date();\n\n            2. 方法：\n                toLocaleString()：返回当前date对象对应的时间本地字符串格式\n                getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差\n\t\t5. Math：数学对象\n            1. 创建：\n                * 特点：Math对象不用创建，直接使用。  Math.方法名();\n\n            2. 方法：\n                random():返回 0 ~ 1 之间的随机数。 含0不含1\n                ceil(x)：对数进行上舍入。\n                floor(x)：对数进行下舍入。\n                round(x)：把数四舍五入为最接近的整数。\n            3. 属性：\n                PI\n\t\t6. Number\n\t\t7. String\n\t\t8. RegExp：正则表达式对象\n\t\t\t1. 正则表达式：定义字符串的组成规则。\n\t\t\t\t1. 单个字符:[]\n\t\t\t\t\t如： [a] [ab] [a-zA-Z0-9_]\n\t\t\t\t\t* 特殊符号代表特殊含义的单个字符:\n\t\t\t\t\t\t\\d:单个数字字符 [0-9]\n\t\t\t\t\t\t\\w:单个单词字符[a-zA-Z0-9_]\n\t\t\t\t2. 量词符号：\n\t\t\t\t\t?：表示出现0次或1次\n\t\t\t\t\t*：表示出现0次或多次\n\t\t\t\t\t+：出现1次或多次\n\t\t\t\t\t{m,n}:表示 m<= 数量 <= n\n\t\t\t\t\t\t* m如果缺省： {,n}:最多n次\n\t\t\t\t\t\t* n如果缺省：{m,} 最少m次\n\t\t\t\t3. 开始结束符号\n\t\t\t\t\t* ^:开始\n\t\t\t\t\t* $:结束\n\t\t\t2. 正则对象：\n\t\t\t\t1. 创建\n\t\t\t\t\t1. var reg = new RegExp("正则表达式");\n\t\t\t\t\t2. var reg = /正则表达式/;\n\t\t\t\t2. 方法\t\n\t\t\t\t\t1. test(参数):验证指定的字符串是否符合正则定义的规范\t\n\t\t9. Global\n\t\t\t1. 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();\n\t\t\t2. 方法：\n\t\t\t    encodeURI():url编码\n\t\t\t    decodeURI():url解码\n\n\t\t\t    encodeURIComponent():url编码,编码的字符更多\n\t\t\t    decodeURIComponent():url解码\n\n\t\t\t    parseInt():将字符串转为数字\n\t\t\t        * 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number\n\t\t\t    isNaN():判断一个值是否是NaN\n\t\t\t        * NaN六亲不认，连自己都不认。NaN参与的==比较全部问false\n\n\t\t\t    eval():讲 JavaScript 字符串，并把它作为脚本代码来执行。\n            3. URL编码\n               传智播客 =  %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2\n\n* BOM\n\n* DOM\n')])]),t._v(" "),a("p",[t._v("​")])])},[],!1,null,null,null);n.default=r.exports}}]);